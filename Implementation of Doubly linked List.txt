#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* insert(struct Node* head, int value, int pos) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->prev = NULL;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        return head;
    }

    if (pos == 1) {
        newNode->next = head;
        head->prev = newNode;
        return newNode;
    }

    struct Node* current = head;
    for (int i = 1; i < pos - 1 && current != NULL; i++) {
        current = current->next;
    }

    if (current != NULL) {
        newNode->next = current->next;
        if (current->next != NULL) {
            current->next->prev = newNode;
        }
        newNode->prev = current;
        current->next = newNode;
    } else {
        printf("Invalid position\n");
    }

    return head;
}

struct Node* delete(struct Node* head, int pos) {
    if (head == NULL)
        return head;

    if (pos == 1) {
        struct Node* temp = head;
        head = head->next;
        if (head != NULL) {
            head->prev = NULL;
        }
        free(temp);
        return head;
    }

    struct Node* current = head;
    for (int i = 1; i < pos - 1 && current != NULL; i++) {
        current = current->next;
    }

    if (current != NULL) {
        struct Node* temp = current->next;
        current->next = current->next->next;
        if (current->next != NULL) {
            current->next->prev = current;
        }
        free(temp);
    } else {
        printf("Invalid position\n");
    }

    return head;
}

int search(struct Node* head, int value) {
    struct Node* current = head;
    while (current != NULL) {
        if (current->data == value)
            return 1;
        current = current->next;
    }
    return 0;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d\t", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    struct Node* head = NULL;
    int n, value, choice, pos;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &value);
        head = insert(head, value, i + 1);
    }

    printf("Linked List: ");
    printList(head);

    printf("Choose an operation:\n");
    printf("1. Insert element\n2. Delete element\n3. Search element\n");
    scanf("%d", &choice);

    switch (choice) {
        case 1: {
            printf("Enter the element to be inserted: ");
            scanf("%d", &value);
            printf("Enter the position of the element: ");
            scanf("%d", &pos);
            head = insert(head, value, pos);
            printf("Updated Linked List: ");
            printList(head);
            break;
        }
        case 2: {
            printf("Enter the position of the element to delete: ");
            scanf("%d", &pos);
            head = delete(head, pos);
            printf("Updated Linked List: ");
            printList(head);
            break;
        }
        case 3: {
            printf("Enter the element you want to search: ");
            scanf("%d", &value);
            if (search(head, value)) {
                printf("Element found\n");
            } else {
                printf("Element not found\n");
            }
            break;
        }
        default:
            printf("Invalid choice\n");
    }

    // Free memory used by the linked list
    struct Node* current = head;
    while (current != NULL) {
        struct Node* temp = current;
        current = current->next;
        free(temp);
    }

    return 0;
}